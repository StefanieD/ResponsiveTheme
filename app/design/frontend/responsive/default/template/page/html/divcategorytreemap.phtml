<?php Mage::helper('responsive/treemap')->generateCategoryJson(); ?>
<?php //var_dump($jsonFile); ?>

<script type="text/javascript">
var margin = {top: 20, right: 0, bottom: 0, left: 0},
    width = 960,
    widthpercent = 100,
    height = 300 - margin.top - margin.bottom,
    formatNumber = d3.format(",d"),
    transitioning;

var x = d3.scale.linear()
    .domain([0, width])
    .range([0, width]);
    

var y = d3.scale.linear()
    .domain([0, height])
    .range([0, height]);

var treemap = d3.layout.treemap()
    .children(function(d, depth) { return depth ? null : d.children; })
    .sort(function(a, b) { return a.value - b.value; })
    .ratio(height / width * 0.5 * (1 + Math.sqrt(5)))
    .round(false);

var svg = d3.select(".div-treemap-wrapper").append("svg")
    //.attr("width", width + margin.left + margin.right)
    .attr("width", "100%")
    .attr("height", height + margin.bottom + margin.top)
    .style("margin-left", -margin.left + "px")
    .style("margin.right", -margin.right + "px")
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
    .style("shape-rendering", "crispEdges");

/*var svg = d3.select("#categorytreemap").append("svg")
    .attr("width", width)
    .attr("height", height)
    .style("margin-left", 0)
    .style("margin.right", 0)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
    .style("shape-rendering", "crispEdges");*/

/*Root element*/
var grandparent = svg.append("g")
    .attr("class", "grandparent");

grandparent.append("rect")
    .attr("y", -margin.top)
    //.attr("width", width)
    .attr("width", widthpercent + "%")
    .attr("height", margin.top);

grandparent.append("text")
    .attr("x", 6)
    .attr("y", 6 - margin.top)
    .attr("dy", ".75em");



d3.json("skin/frontend/responsive/default/js/test.json", function(root) {

//setzt x, y, breite und höhe
  initialize(root);
//berechnet rekursiv size zusammen
  accumulate(root);
//setzen von breite und höhe von jedem kindknoten
  layout(root);
  display(root);

  function initialize(root) {
    root.x = root.y = 0;
    root.dx = width;
    root.widthpixel = width;
    root.dy = height;
    root.depth = 0;
  }

  // Aggregate the values for internal nodes. This is normally done by the
  // treemap layout, but not here because of our custom implementation.
  function accumulate(d) {
    return d.children
	? d.value = d.children.reduce(function(p, v) { return p + accumulate(v); }, 0)
        : d.value;
  }

  // Compute the treemap layout recursively such that each group of siblings
  // uses the same size (1×1) rather than the dimensions of the parent cell.
  // This optimizes the layout for the current zoom state. Note that a wrapper
  // object is created for the parent node for each group of siblings so that
  // the parent’s dimensions are not discarded as we recurse. Since each group
  // of sibling was laid out in 1×1, we must rescale to fit using absolute
  // coordinates. This lets us use a viewport to zoom.
  function layout(d) {
    if (d.children) {
      treemap.nodes({children: d.children});
      d.children.forEach(function(c) {
        c.x = d.x + c.x * d.dx;
        c.y = d.y + c.y * d.dy;
        c.dx *= d.dx;
        //alert(c.name);
        //alert(c.dx + " Pixel");
        c.widthpercent = c.dx * 100 / width;
        c.xpercent = c.x * 100 / width;
        //alert(d.dx);
        //alert(c.widthpixel + " %");
        //c.percentwidth = 100;
        //c.percent = (c.dx * 100 / d.dx);
        c.dy *= d.dy;
        c.parent = d;
        layout(c);
      });
    }
  }

  function display(d) {
    grandparent
        .datum(d.parent)
        .on("click", transition)
      .select("text")
        .text(name(d));

    var g1 = svg.insert("g", ".grandparent")
        .datum(d)
        .attr("class", "depth");

    var g = g1.selectAll("g")
        .data(d.children)
      .enter().append("g");

    g.filter(function(d) { return d.children; })
        .classed("children", true)
        .attr("width", "100%")
        .on("click", transition);

    g.selectAll(".child")
        .data(function(d) { return d.children || [d]; })
      .enter().append("rect")
        .attr("class", "child")
        .call(rect);

    g.append("rect")
        .attr("class", "parent")
        .call(rect)
      .append("title")
        .text(function(d) { return formatNumber(d.value); });

    g.append("text")
        .attr("dy", ".75em")
        .text(function(d) { return d.name; })
        .call(text);

    function transition(d) {
      if (transitioning || !d) return;
      transitioning = true;

      var g2 = display(d),
          t1 = g1.transition().duration(750),
          t2 = g2.transition().duration(750);

      // Update the domain only after entering new elements.
      //x.domain([d.x, d.x + d.dx]);
      //y.domain([d.y, d.y + d.dy]);

      // Enable anti-aliasing during the transition.
      svg.style("shape-rendering", null);

      // Draw child nodes on top of parent nodes.
      svg.selectAll(".depth").sort(function(a, b) { return a.depth - b.depth; });

      // Fade-in entering text.
      g2.selectAll("text").style("fill-opacity", 0);

      // Transition to the new view.
      t1.selectAll("text").call(text).style("fill-opacity", 0);
      t2.selectAll("text").call(text).style("fill-opacity", 1);
      t1.selectAll("rect").call(rect);
      t2.selectAll("rect").call(rect);

      // Remove the old node when the transition is finished.
      t1.remove().each("end", function() {
        svg.style("shape-rendering", "crispEdges");
        transitioning = false;
      });
      
     // alert(d.name);
      d3.select(".products").attr("id", d.id)
    }

    return g;
  }

  function text(text) {
    text.attr("x", function(d) { return ((d.xpercent) + "%"); })
        .attr("y", function(d) { return y(d.y) + 6; });
  }

  function rect(rect) {
    rect.append("div")//.attr("x", function(d) { return x(d.x); })
        .style("left", function(d) { return (d.xpercent + "%"); })
        .style("top", function(d) { return y(d.y) + "px"; })
        //.attr("width", function(d) { return (x(d.x + d.dx) - x(d.x)); })
        .attr("width", function(d) { return (d.widthpercent + "%"); })
        .attr("height", function(d) { return (y(d.y + d.dy) - y(d.y)); });
        //.attr("style", "margin:33% 33% 33% 33%");
  }

  function name(d) {
    return d.parent
        ? name(d.parent) + "." + d.name
        : d.name;
  }
});
</script>